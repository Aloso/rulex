#![no_main]
use libfuzzer_sys::fuzz_target;

use pomsky::{
    options::{CompileOptions, RegexFlavor},
    Expr,
};

fuzz_target!(|data: (&str, CompileOptions)| {
    let (input, compile_options) = data;
    let result = Expr::parse_and_compile(input, compile_options);

    if let Ok((regex, _warnings)) = result {
        let features = compile_options.allowed_features;

        // the first check is just to make it less likely to run into regex's nesting
        // limit; the second check is to ignore compile errors produced by raw
        // regexes, which pomsky doesn't validate
        if regex.len() < 2048 && features == { features }.regexes(false) {
            match compile_options.flavor {
                RegexFlavor::Rust => {
                    regex::Regex::new(&regex).unwrap();
                }
                RegexFlavor::Pcre if features == { features }.lookbehind(false) => {
                    pcre2::bytes::RegexBuilder::new().utf(true).build(&regex).unwrap();
                }
                _ => {}
            }
        }
    }
});

#[cfg(any())]
#[rustfmt::skip]
fn failing_to_compile_in_rust() {
    // this somehow runs into regex's recursion limit
    "[\"\0\u{1}$**$dddddddddd!dDdddddddddddddddddddddddddWĥddddddddddddddd\0\0\u{3}\0base\0\0\0\0 \0\0\0\0\0\0\0\0i\0~~~~~~~~~~~~~~.~~~~~~~~~~~~~~~^~~~~~~~~~\u{5f6}10~~~~~~~~~~~~~~~~~~~\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0 \0\0\0\0,\0\0\0\0\0\0~~~~~~~~~~~~~~.~~~~~~~~~~~~~~~^~~~~~~~~~\u{5f6}10~~~~~~~~~~~~~~~~~~~\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0~~~~~~~\u{b}\0\0\0\0\0\0\0~\0\0\0~~~~~~~~^~.~~~~~~~~~~~~~~~^~~~~~~~~~\u{5f6}10~~~~~~~~~~~~~~\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0~~~~~~~\u{b}\0\0\0\0\0\0\0~\0\0\0~~~~~~~~^~.~~~~~~~~~~~~~~~^~~~~~~~~~\u{5f6}10~~~~~~~~~~~~~~~~~\0\0\0\0\0\0\0\0\0\0\0\0{[{B{{>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0 \0\0\0\0\0\0\0\0\0\0~~~~~~~~~~~~~~.~~~~~~~~~~~$~~~^~~~~~~~~~\u{5f6}1UUUUU\u{5}~\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0 \0\0\0\0\0\0\0\0\0\0~~~~~~~~~~~~~~.~~~~~~~~~~~~~~~^~~~~~~~~~\u{5f6}10~~\u{2}\0\0\0\0\0\0\0~~~~~~~~~\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0~~~~~~~~~~~~~~.~~~~~~~~~~~~~~~^~~~~~~~~~\u{5f6}10~~~~~~~~~~~~~~~~~~~\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0~~~~~~~\u{b}\0\0\0\0\0\0\0~\0\0\0~~~~~~~~^~.~~~~~~~~~~~~~~~^~~~~~~~~~\u{5f6}10~~~~~~~~~~~~~~\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0~~~~~~~\u{b}\0\0\0\0\0\0\0~\0\0\0~~~~~~~~^~.~~~~~~~~~~~~~~~^~~~~~~~~~\u{5f6}10~~~~~~~~~~~~~~~~~\0\0\0\0\0\0\0\0\0\0\0\0{[{B{{>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0 \0\0\0\0\0\0\0\0\0\0~~~~~~~~~~~~~~.~~~~~~~~~~~$~~~^~~~~~~~~~\u{5f6}1UUUUU\u{5}~\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0 \0\0\0\0\0\0\0\0\0\0~~~~~~~~~~~~~~.~~~~~~~~~~~~~~~^~~~~~~~~~\u{5f6}10~~\u{2}\0\0\0\0\0\0\0~~~~~~~~~\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0=\0\0\0\0\0\0dddddddd<8+++k++++\0\0\u{8}\0\0|U4+AAU9|U5+\n\ne))\0\0(U$\u{5}'.\0\0(U$\u{5}'.\0\0].]++++$\0\u{1}\u{1}\0\0 \0\0\0\u{5}'\"\"*\"]#&\"\"\"\"\0\0\0\"";
    // compiled:
    // [\x00\x01$**$dddddddddd!dDdddddddddddddddddddddddddWĥddddddddddddddd\x00\x00\x03\x00base\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00i\x00~~~~~~~~~~~~~~.~~~~~~~~~~~~~~~\^~~~~~~~~~\u05F610~~~~~~~~~~~~~~~~~~~\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00,\x00\x00\x00\x00\x00\x00~~~~~~~~~~~~~~.~~~~~~~~~~~~~~~\^~~~~~~~~~\u05F610~~~~~~~~~~~~~~~~~~~\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00~~~~~~~\x0B\x00\x00\x00\x00\x00\x00\x00~\x00\x00\x00~~~~~~~~\^~.~~~~~~~~~~~~~~~\^~~~~~~~~~\u05F610~~~~~~~~~~~~~~\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00~~~~~~~\x0B\x00\x00\x00\x00\x00\x00\x00~\x00\x00\x00~~~~~~~~\^~.~~~~~~~~~~~~~~~\^~~~~~~~~~\u05F610~~~~~~~~~~~~~~~~~\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00{\[{B{{>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00~~~~~~~~~~~~~~.~~~~~~~~~~~$~~~\^~~~~~~~~~\u05F61UUUUU\x05~\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00~~~~~~~~~~~~~~.~~~~~~~~~~~~~~~\^~~~~~~~~~\u05F610~~\x02\x00\x00\x00\x00\x00\x00\x00~~~~~~~~~\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00~~~~~~~~~~~~~~.~~~~~~~~~~~~~~~\^~~~~~~~~~\u05F610~~~~~~~~~~~~~~~~~~~\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00~~~~~~~\x0B\x00\x00\x00\x00\x00\x00\x00~\x00\x00\x00~~~~~~~~\^~.~~~~~~~~~~~~~~~\^~~~~~~~~~\u05F610~~~~~~~~~~~~~~\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00~~~~~~~\x0B\x00\x00\x00\x00\x00\x00\x00~\x00\x00\x00~~~~~~~~\^~.~~~~~~~~~~~~~~~\^~~~~~~~~~\u05F610~~~~~~~~~~~~~~~~~\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00{\[{B{{>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00~~~~~~~~~~~~~~.~~~~~~~~~~~$~~~\^~~~~~~~~~\u05F61UUUUU\x05~\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00~~~~~~~~~~~~~~.~~~~~~~~~~~~~~~\^~~~~~~~~~\u05F610~~\x02\x00\x00\x00\x00\x00\x00\x00~~~~~~~~~\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00=\x00\x00\x00\x00\x00\x00dddddddd<8+++k++++\x00\x00\x08\x00\x00\|U4+AAU9\|U5+\n\ne))\x00\x00(U$\x05'.\x00\x00(U$\x05'.\x00\x00\].\]++++$\x00\x01\x01\x00\x00 \x00\x00\x00\x05'*]
}

#[cfg(any())]
fn failing_to_compile_in_pcre() {
    // this runs into PCRE2's limitation that lookbehinds can't contain repetitions
    // the same limitation exists in R
    "<<$*"
    // compiled:
    // (?<=(?:$)*)
}
